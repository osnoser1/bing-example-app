import { FormEvent, useState } from "react";
import Head from "next/head";
import Link from "next/link";

import cn from "classnames";
import type { NextPage } from "next";

import { useBingSearch } from "../utils/useBingSearch";
import { Loader } from "./components/Loader";

import s from "../styles/Home.module.scss";

const Home: NextPage = () => {
  const [query, setQuery] = useState<string>("");
  const { data: results, isLoading, error } = useBingSearch(query);

  const handleSearch = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    const search = formData.get("search") as string;
    setQuery(search);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container prose lg:max-w-[100ch] py-6">
        <div className="mb-4">
          <h1>Bing Search API Example</h1>
          <form className="space-x-4 flex items-center" onSubmit={handleSearch}>
            <input
              className="flex-auto"
              name="search"
              type="text"
              placeholder="Ask me anything..."
              maxLength={100}
            />
            <button className="rounded-full">Search</button>
          </form>
        </div>
        {error && (
          <div className="p-3 my-4 bg-red-400 text-white">
            {error.code === 429
              ? `${error.message}, try in one minute again...`
              : "Error, try again..."}
          </div>
        )}
        <div className="not-prose relative">
          {results?.length === 0 && (
            <div>
              <p>
                There are no results for <strong>{query}</strong>
              </p>
              <p>Check your spelling or try different keywords</p>
            </div>
          )}
          {results && (
            <ol className={cn("not-prose", s.resultList)}>
              {results.map(result => (
                <li key={result.url} className={s.resultItem}>
                  <h2 className={s.title}>
                    <Link href={result.url} target="_blank">
                      {result.name}
                    </Link>
                  </h2>
                  <cite className={s.link}>{result.url}</cite>
                  <p className={s.description}>{result.snippet}</p>
                </li>
              ))}
            </ol>
          )}
          {isLoading && <Loader className="absolute inset-0 " />}
        </div>
      </main>
    </>
  );
};

export default Home;
